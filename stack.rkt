#lang racket

(define stack '())
(define size 0)

(define (Stack oper . arg)
  (define (operation oper)
    (cond ((eq? oper 'push)
           (push arg))
          ((eq? oper 'pop)
           (pop))
          ((eq? oper 'clear)
           (clear))))
  (define (push arg)
    (let ()
      (set! stack (cons arg stack))
      (set! size (+ size 1))      
      stack))
  (define (pop)
    (let ()
      (cond ((= size 0) "No element to pop!")
            (else (let ()
                    (set! stack (cdr stack))
                    (set! size (- size 1))           
                    stack)))))
  (define (clear)
     (let ()
       (set! stack '())
       (set! size 0)       
       stack))
  (operation oper))

(define (mut-stack stk oper . arg)
  (cond ((eq? 'show oper) stk)
        ((eq? 'push oper) (cons arg stk))
        ((eq? 'pop oper)
         (if (null? stk)
             "Null stack"
             (cdr stk)))
        ((eq? 'clear oper) '())))