;; The Little Schemer

(define atom? 
  (lambda (e)
    (if (and (not (pair? e)) (not (null? e)))
        #t
        #f)))

(define lat?
  (lambda (l)
    (cond ((null? l) #t)
          ((atom? (car l)) (lat? (cdr l)))
          (else #f))))

(define member?
  (lambda (a lat)
    (cond ((null? lat) #f)
          (else (or (eq? a (car lat))
                    (member? a (cdr lat)))))))

(define (rember a lat)
  (cond ((null? lat) '())
        ((eq? a (car lat)) (rember a (cdr lat)))
        (else (cons (car lat)
                    (rember a (cdr lat))))))

(define rember+
  (lambda (a lat)
    (cond ((null? lat) '())
          (else (cond ((eq? a (car lat)) (cdr lat))
                      (else (cons (car lat)
                                  (rember a (cdr lat)))))))))

(define firsts 
  (lambda (l)
    (cond ((null? l) '())
          (else (cons (car (car l))
                      (firsts (cdr l)))))))
(define seconds
  (lambda (l)
    (cond ((null? l) '())
          (else (cons (car (cdr (car l)))
                      (seconds (cdr l)))))))

(define insertR 
  (lambda (new old lat)
    (cond ((null? lat) '())
          (else (cond 
                  ((eq? old (car lat)) (cons old
                                             (cons new 
                                                   (insertR new old (cdr lat)))))
                      (else (cons (car lat)
                                  (insertR new old (cdr lat)))))))))

(define insertL
  (lambda (new old lat)
    (cond ((null? lat) '())
          (else (cond 
                  ((eq? old (car lat)) (cons new
                                             (cons old 
                                                   (insertL new old (cdr lat)))))
                      (else (cons (car lat)
                                  (insertL new old (cdr lat)))))))))

(define multisubst
  (lambda (new old lat)
    (cond ((null? lat) '())
          (else (cond ((eq? (car lat) old)
                       (cons new 
                             (multisubst new old (cdr lat))))
                      (else (cons (car lat)
                                  (multisubst new old (cdr lat)))))))))

;;(add1) (sub1) (+)

(define add
  (lambda (n m)
    (if (zero? m) 
        n
        (add1 (add n (sub1 m))))))

(define sub
  (lambda (n m)
    (if (zero? m)
        n
        (sub1 (sub n (sub1 m))))))

(define mul
  (lambda (n m)
    (if (zero? m) 
        0
        (add n (mul n (sub1 m))))))

(define div
  (lambda (n m)
    (if (zero? m) 
        'error
        (cond ((< n m) 0)
              (else (add1 (div (- n m) m)))))))

(define tup+
  (lambda (tup1 tup2)
    (cond ((null? tup1) tup2)
          ((null? tup2) tup1)
          (else (cons (add (car tup1) (car tup2))
                      (tup+ (cdr tup1) (cdr tup2)))))))

(define average
  (lambda (nums)
    (/ (apply + nums) (length nums))))

(define is-even?
  (lambda (n)
    (if (= n 0) #t
        (is-odd? (- n 1)))))
(define is-odd?
  (lambda (n)
    (if (= n 0) #f
        (is-even? (- n 1)))))

(define (power a b)
  (if (< b 0) 
      (/ 1 (power-iter 1 a b))
      (power-iter 1 a b)))

(define (power-iter n a b)
  (if (< (abs b) 1)
      n
      (power-iter (* n a) a (- (abs b) 1))))

(define cpy
  (lambda (l)
    (if (null? l)
        '()
        (cons (car l)
              (cpy (cdr l))))))

(define len
  (lambda (l)
    (if (null? l)
        0
        (add1 (len (cdr l))))))

(define pick
  (lambda (l n)
    (if (zero? n) 
        (car l)
        (pick (cdr l) (- n 1)))))

(define rempick
  (lambda (l n)
    (if (zero? n)
        (cdr l)
        (cons (car l)
              (rempick (cdr l) (- n 1))))))

(define no-nums
  (lambda (l)
    (cond ((null? l) '())
          ((number? (car l)) (no-nums (cdr l)))
          (else (cons (car l)
                      (no-nums (cdr l)))))))

(define all-nums
  (lambda (lat)
    (cond ((null? lat) '())
          (else (cond ((number? (car lat))
                       (cons (car lat)
                             (all-nums (cdr lat))))
                      (else (all-nums (cdr lat))))))))

(define occur
  (lambda (a lat)
    (cond ((null? lat) 0)
          (else (cond ((eq? (car lat) a)
                       (add1 (occur a (cdr lat))))
                       (else (occur a (cdr lat))))))))

(define rember*
  (lambda (a l)
    (cond ((null? l) '())
          ((atom? (car l))
           (cond ((eq? (car l) a)
                  (rember* a (cdr l)))
                 (else (cons (car l)
                             (rember* a (cdr l))))))
          (else (cons (rember* a (car l))
                      (rember* a (cdr l)))))))

(define insertR*
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((atom? (car lat))
           (cond ((eq? (car lat) old)
                  (cons old
                        (cons new
                              (insertR* new old (cdr lat)))))
                 (else (cons (car lat)
                             (insertR* new old (cdr lat))))))
          (else (cons (insertR* new old (car lat))
                      (insertR* new old (cdr lat)))))))

(define occur*
  (lambda (a lat)
    (cond ((null? lat) 0)
          ((atom? (car lat))
           (cond ((eq? a (car lat))
                  (add1 (occur* a (cdr lat))))
                 (else (occur* a (cdr lat)))))
          (else (add (occur* a (car lat))
                     (occur* a (cdr lat)))))))

(define subst*
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((atom? (car lat))
           (cond ((eq? (car lat) old)
                  (cons new (subst* new old (cdr lat))))
                  (else (cons (car lat)
                              (subst* new old (cdr lat))))))
          (else (cons (subst* new old (car lat))
                      (subst* new old (cdr lat)))))))

;;(define l '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy)))
;;(define a 'banana)

(define insertL*
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((atom? (car lat))
           (cond ((eq? (car lat) old)
                  (cons new
                        (cons old (insertL* new old (cdr lat)))))
                 (else (cons (car lat)
                             (insertL* new old (cdr lat))))))
          (else (cons (insertL* new old (car lat))
                      (insertL* new old (cdr lat)))))))

(define member*
  (lambda (a l)
    (cond ((null? l) #f)
          ((atom? (car l))
           (or (eq? (car l) a)
               (member* a (cdr l))))
          (else (or (member* a (car l))
                    (member* a (cdr l)))))))

(define eqan?
  (lambda (a1 a2)
    (cond
      ((and (number? a1) (number? a2)) (= a1 a2))
      ((or (number? a1) (number? a2)) #f)
      (else (eq? a1 a2)))))


(define eqlist?
  (lambda (l1 l2)
    (cond ((and (null? l1) (null? l2)) #t)
          ((or (null? l1) (null? l2)) #f)
          ((and (atom? (car l1)) (atom? (car l2)))
           (and (eqan? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2))))
          ((or (atom? (car l1)) (atom? (car l2))) #f)
          (else (and (eqlist? (car l1) (car l2))
                     (eqlist? (cdr l1) (cdr l2)))))))

(define equal??
  (lambda (s1 s2)
    (cond ((and (atom? s1) (atom? s2)) (eqan? s1 s2))
          ((or (atom? s1) (atom? s2)) #f)
          (else (eqlist? s1 s2)))))

(define eqlist??
  (lambda (l1 l2)
    (cond ((and (null? l1) (null? l2)) #t)
          ((or (null? l1) (null? l2)) #f)
          (else (and (equal? (car l1) (car l2))
                     (eqlist?? (car l1) (cdr l2)))))))

(define numbered?
  (lambda (aexp)
    (cond ((atom? aexp) (number? aexp))
          (else (and (numbered? (car aexp))
                     (numbered? (car (cdr (cdr aexp)))))))))

(define value
  (lambda (nexp)
    (cond ((atom? nexp) nexp)
          ((eq? (car nexp) '(add))
           (+ (value (cdr nexp))
              (value (cdr (cdr nexp)))))
          ((eq? (car nexp) '(mul))
           (* (value (cdr nexp))
              (value (cdr (cdr nexp)))))
          (else (power (value (cdr nexp))
                       (value (cdr (cdr nexp))))))))

