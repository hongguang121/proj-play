(define (int n)
  (if (= 1 (remainder n 2))
      (+ n 1)
      n))

(define (qsort lst)
  (define (find arr n)
    (if (= n 0)
        (car arr)
        (find (cdr arr) (- n 1))))
  (define (swap arr brr count i j)
    (cond ((= count i) (cons (find arr j) (swap arr (cdr brr) (+ count 1) i j)))
          ((= count j) (cons (find arr i) (swap arr (cdr brr) (+ count 1) i j)))
          ((null? brr) '())
          (else (cons (car brr) (swap arr (cdr brr) (+ count 1) i j)))))
  
  (define (compare arr i j r)
    (cond ((= j -1) arr)
          ((= i r) arr)
          ((and (= j 0) (< (find arr j) (find arr r))) arr)
          ((and (= j 0) (> (find arr j) (find arr r))) (compare (swap arr arr 0 i r) i -1 r))
          
          ((and (< i j) (> (find arr i) (find arr r)) (< (find arr j) (find arr r)))
           (compare (swap arr arr 0 i j) (+ i 1) (- j 1) r))
          ((and (< (find arr i) (find arr r)) (> (find arr j) (find arr r)))
           (compare arr (+ i 1) (- j 1) r))          
          ((and (< (find arr i) (find arr r)) (< (find arr j) (find arr r)))
           (compare arr (+ i 1) j r))
          ((and (> (find arr i) (find arr r)) (> (find arr j) (find arr r)))
           (compare arr i (- j 1) r))   
          ((and (> i j) (> (find arr i) (find arr r)) (< (find arr j) (find arr r)))
           (compare (swap arr arr 0 i r) i -1 r))
          ((and (> i j) (> (find arr i) (find arr r)) (> (find arr j) (find arr r)))
           (compare (swap arr arr 0 j r) i -1 r))))
  
  (define (qsort-iter arr n)
    (if (= n 0)
        arr
        (qsort-iter (compare (swap arr arr 0 (- (length lst) 1) (- (/ (int (length lst)) 2) 1))
                             0
                             (- (length lst) 2)
                             (- (length lst) 1)) (- n 1))))
  (qsort-iter lst 30))