(define (List l m)
  (define (add a)
    (begin (set! l (append l (list a))) l))
  (define (rem a l)
    (if (null? l)
        '()
        (if (eq? a (car l))
            (cdr l)
            (cons (car l) (rem a (cdr l))))))
  (define (remove a)
    (begin (set! l (rem a l)) l))
  (define (member? a l)
    (cond ((null? l) #f)
          ((eq? a (car l)) #t)
          (else (member? a (cdr l)))))
  (define (choose m)
    (cond ((eq? m 'add) add)
          ((eq? m 'remove) remove)
          ((eq? m 'member?) member?)
          (else (error "Wrong command!"))))
  (choose m))

 (define l '())
 (define M1 (List l 'add))
 (define M2 (List l 'remove))
 (define M3 (List l 'member?))
 
(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          (error "Insufficient funds")))))

(define W1 (make-withdraw 100))

(define (rem a l)
    (if (null? l)
        '()
        (if (eq? a (car l))
            (cdr l)
            (cons (car l) (rem a (cdr l))))))