#lang racket
(require racket/file)
(require racket/string)
(require math/array)

(define time current-inexact-milliseconds)

(define wordlist (file->string "K:\\wordlist.txt"))
(define go (file->string "K:\\gojion.txt"))
(define kty (file->string "K:\\katuyo.txt"))
(define kty+ (file->list "K:\\katuyo+.txt"))
(define jpds (file->list "K:\\katuyo-dousi.txt"))
(define text1 (file->string "K:\\text.txt"))
(define jsp (file->string "K:\\jpsplit.txt"))

(define (exist? a lst)
  (cond ((null? lst) #f)
        ((string=? a (car lst)) #t)
        (else (exist? a (cdr lst)))))

(define (exist-all a lat)
    (cond ((= (string-length a) 1)
           (single a lat))
          (else (complex a (single (car (word-sp a)) lat)))))

(define (single a lst)
  (define (iter l)
    (cond ((null? l) '())
          ((string=? a (car (word-sp (car l))))
           (cons (car l)
                 (iter (cdr l))))
          (else (iter (cdr l)))))
  (iter (split lst #\space)))

(define (complex a lst)
  (define (iter l al)
    (cond ((null? l) '())
          ((and (not (< (string-length (car l)) al))
                (string=? a (substring (car l) 0 al)))
           (cons (car l)
                 (iter (cdr l) al)))
          (else (iter (cdr l) al))))
  (iter lst (string-length a)))

;(string-split str reg)
(define (split lst sp)
  (define (iter l s w)
    (if (null? l)
        (append w (list (list->string s)))
        (if (eq? (car l) sp)
            (iter (cdr l) '() (append w (list (list->string s))))
            (iter (cdr l) (append s (list (car l))) w))))
  (iter (string->list lst) '() '()))

(define (word-sp s)
  (define (iter w id)
    (cond ((= id (string-length s)) (reverse w))
          (else (iter (cons (list->string (list (string-ref s id))) w)
                      (+ id 1)))))
  (iter '() 0))

;(map (lambda(x) (symbol->string x)) jpds)
;(filter (lambda(x) (not (eq? #f x))) (check "^起.+" (map (lambda(x) (symbol->string x)) jpds)))
;rx:正则表达式
(define (check rx lst)
  (map (lambda(x) (regexp-match (regexp rx) x)) lst))

(define (no-last lst)
  (reverse (cdr (reverse lst))))

(define (last lst)
  (car (reverse lst)))

;(longest (list "北" "京" "大" "学" "的" "确" "是" "定") (split wordlist #\space))
(define (longest str lat)
  (define (iter str a mem)
    (cond ((and (null? str)(eq? mem "")) a)
          ((and (null? str)(exist? a lat)) a)
          ((and (null? str)(= (string-length mem) 1)) mem)
          ((null? str) mem)
          ((not (exist? a lat))
           (iter (cdr str) (string-append a (car str)) mem))
          (else (iter (cdr str) (string-append a (car str)) a))))
  (iter str "" ""))

(define (path str lat)
  (define (iter str a path)
    (cond ((and (null? str)(eq? path "")) a)
          ((and (null? str)(= (string-length path) 2)) a)
          ((null? str) path)
          ((exist? a lat)
           (iter (cdr str) (string-append a (car str)) (string-append path a "/")))
          (else (iter (cdr str) (string-append a (car str)) path))))
  (iter (cdr str) (car str) ""))

;(sub-str (word-sp "北京大学") (word-sp "北京大学生"))
(define (sub-str new old)
  (cond ((null? new) old)
        ((string=? (car new) (car old))
         (sub-str (cdr new) (cdr old)))))

(define (split-cn s)
  (define (iter str wrdlst ret)
    (cond ((null? str) ret)         
          (else (iter (sub-str (word-sp (longest str wrdlst)) str)
                      wrdlst                         
                      (string-append ret (longest str wrdlst) "/")))))
  (iter (word-sp s) (split wordlist #\space) ""))

;把汉字过滤掉,返回kn
(define (kana goi)
  (string-append* (filter (lambda (x) (exist? x (word-sp go))) (word-sp goi))))

(define (kanji goi)
  (string-append* (filter (lambda (x) (not (exist? x (word-sp go)))) (word-sp goi))))

(define (kana? goi)
  (if (exist? goi (split go #\space))
      #t
      #f))

(define (kanji? goi)
  (if (not (exist? goi (split go #\space)))
      #t
      #f))

;(katuyo "来る")
(define (katuyo kn)
  (define (iter w kty kty+ id mem)
    (cond ((> id (string-length kn)) error)
          ((null? kty) (iter (substring kn id) kty+ kty+ (+ id 1) mem))
          ((string=? w (car kty)) mem)
          ((or (string=? (car kty) "五段")
               (string=? (car kty) "一段")
               (string=? (car kty) "カサ"))
           (iter w (cdr kty) kty+ id (car kty)))
          (else (iter w (cdr kty) kty+ id mem))))
  (iter kn (split kty #\space) (split kty #\space) 1 ""))

;将字符串列表转换为字符串
(define (constr lst)
  (cond ((null? lst) "")
        (else (string-append (car lst)
                             (constr (cdr lst))))))

;将字符a从str中删除
(define (rem str a)
  (define (iter str a)
    (cond ((null? a) "")
          ((string=? (car str) (car a))
           (iter (cdr str) (cdr a)))
          (else (string-append (car str)
                               (iter (cdr str) a)))))
  (iter (word-sp str) (word-sp a)))

(define (find lst id)
  (cond ((or (< id 0) (not (< id (length lst)))) '())
        ((= id 0) (car lst))
        (else (find (cdr lst) (- id 1)))))

;;;;動詞活用

(define (katuyo-nai kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (last (word-sp kn)) "う")
                  (string-append (constr (no-last (word-sp kn))) "わない"))
                 (else (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                                        (last (word-sp kn)))
                              (string-append (constr (no-last (word-sp kn)))
                                             (symbol->string (find (find kty+ cnt1) cnt3))
                                             "ない"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "ない"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "ない"))
                 ((string=? kn "くる") "こない")
                 (else (string-append (rem kn "する") "しない"))))))
  (iter kty+ 1 2 0))

(define (ukemi kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (last (word-sp kn)) "う")
                  (string-append (constr (no-last (word-sp kn))) "われる"))
                 (else (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                                        (last (word-sp kn)))
                              (string-append (constr (no-last (word-sp kn)))
                                             (symbol->string (find (find kty+ cnt1) cnt3))
                                             "れる"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "られる"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "られる"))
                 ((string=? kn "くる") "こられる")
                 (else (string-append (rem kn "する") "される"))))))
  (iter kty+ 1 2 0))

(define (sieki kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (last (word-sp kn)) "う")
                  (string-append (constr (no-last (word-sp kn))) "わせる"))
                 (else (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                                        (last (word-sp kn)))
                              (string-append (constr (no-last (word-sp kn)))
                                             (symbol->string (find (find kty+ cnt1) cnt3))
                                             "せる"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "させる"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "させる"))
                 ((string=? kn "くる") "こさせる")
                 (else (string-append (rem kn "する") "させる"))))))
  (iter kty+ 1 2 0))

(define (ssrr kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (last (word-sp kn)) "う")
                  (let()
                    (string-append (constr (no-last (word-sp kn))) "わせられる")
                    (string-append (constr (no-last (word-sp kn))) "わされる")))
                 (else (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                                        (last (word-sp kn)))
                              (let()
                                (string-append (constr (no-last (word-sp kn)))
                                             (symbol->string (find (find kty+ cnt1) cnt3))
                                             "せらせる")
                                (string-append (constr (no-last (word-sp kn)))
                                             (symbol->string (find (find kty+ cnt1) cnt3))
                                             "される")))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "させられる"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "させられる"))
                 ((string=? kn "くる") "こさせられる")
                 (else (string-append (rem kn "する") "させられる"))))))
  (iter kty+ 1 2 0))

(define (renyo kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 ""))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) ""))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) ""))
                 ((string=? kn "くる") "き")
                 (else (string-append (rem kn "する") "し"))))))
  (iter kty+ 1 2 1))

(define (masu kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 "ます"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "ます"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "ます"))
                 ((string=? kn "くる") "きます")
                 (else (string-append (rem kn "する") "します"))))))
  (iter kty+ 1 2 1))

(define (masita kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 "ました"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "ました"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "ました"))
                 ((string=? kn "くる") "きました")
                 (else (string-append (rem kn "する") "しました"))))))
  (iter kty+ 1 2 1))
  
(define (katuyo-te kn)
  (cond ((string=? (katuyo kn) "五段")
         (cond ((string=? kn "行く")
                (string-append (constr (no-last (word-sp kn))) "って"))
               ((or (string=? (last (word-sp kn)) "う")
                    (string=? (last (word-sp kn)) "つ")
                    (string=? (last (word-sp kn)) "る"))
                (string-append (constr (no-last (word-sp kn))) "って"))
               ((or (string=? (last (word-sp kn)) "ぬ")
                    (string=? (last (word-sp kn)) "む")
                    (string=? (last (word-sp kn)) "ぶ"))
                (string-append (constr (no-last (word-sp kn))) "んで"))
               ((string=? (last (word-sp kn)) "く")
                (string-append (constr (no-last (word-sp kn))) "いて"))
               ((string=? (last (word-sp kn)) "ぐ")
                (string-append (constr (no-last (word-sp kn))) "いで"))
               ))
        ((string=? (katuyo kn) "一段")
         (string-append (constr (no-last (word-sp kn))) "て"))
        ((string=? (katuyo kn) "カサ")
         (cond ((string=? kn "来る")
                (string-append (constr (no-last (word-sp kn))) "て"))
               ((string=? kn "くる") "きた")
               (else (string-append (rem kn "する") "して"))))))

(define (katuyo-teiru kn)
  (cond ((string=? (katuyo kn) "五段")
         (cond ((string=? kn "行く")
                (string-append (constr (no-last (word-sp kn))) "っている"))
               ((or (string=? (last (word-sp kn)) "う")
                    (string=? (last (word-sp kn)) "つ")
                    (string=? (last (word-sp kn)) "る"))
                (string-append (constr (no-last (word-sp kn))) "っている"))
               ((or (string=? (last (word-sp kn)) "ぬ")
                    (string=? (last (word-sp kn)) "む")
                    (string=? (last (word-sp kn)) "ぶ"))
                (string-append (constr (no-last (word-sp kn))) "んでいる"))
               ((string=? (last (word-sp kn)) "く")
                (string-append (constr (no-last (word-sp kn))) "いている"))
               ((string=? (last (word-sp kn)) "ぐ")
                (string-append (constr (no-last (word-sp kn))) "いでいる"))
               ))
        ((string=? (katuyo kn) "一段")
         (string-append (constr (no-last (word-sp kn))) "ている"))
        ((string=? (katuyo kn) "カサ")
         (cond ((string=? kn "来る")
                (string-append (constr (no-last (word-sp kn))) "ている"))
               ((string=? kn "くる") "きた")
               (else (string-append (rem kn "する") "している"))))))

(define (katuyo-teita kn)
  (cond ((string=? (katuyo kn) "五段")
         (cond ((string=? kn "行く")
                (string-append (constr (no-last (word-sp kn))) "っていた"))
               ((or (string=? (last (word-sp kn)) "う")
                    (string=? (last (word-sp kn)) "つ")
                    (string=? (last (word-sp kn)) "る"))
                (string-append (constr (no-last (word-sp kn))) "っていた"))
               ((or (string=? (last (word-sp kn)) "ぬ")
                    (string=? (last (word-sp kn)) "む")
                    (string=? (last (word-sp kn)) "ぶ"))
                (string-append (constr (no-last (word-sp kn))) "んでいた"))
               ((string=? (last (word-sp kn)) "く")
                (string-append (constr (no-last (word-sp kn))) "いていた"))
               ((string=? (last (word-sp kn)) "ぐ")
                (string-append (constr (no-last (word-sp kn))) "いでいた"))
               ))
        ((string=? (katuyo kn) "一段")
         (string-append (constr (no-last (word-sp kn))) "ていた"))
        ((string=? (katuyo kn) "カサ")
         (cond ((string=? kn "来る")
                (string-append (constr (no-last (word-sp kn))) "ていた"))
               ((string=? kn "くる") "きた")
               (else (string-append (rem kn "する") "していた"))))))

(define (katuyo-ta kn)
  (cond ((string=? (katuyo kn) "五段")
         (cond ((string=? kn "行く")
                (string-append (constr (no-last (word-sp kn))) "った"))
               ((or (string=? (last (word-sp kn)) "う")
                    (string=? (last (word-sp kn)) "つ")
                    (string=? (last (word-sp kn)) "る"))
                (string-append (constr (no-last (word-sp kn))) "った"))
               ((or (string=? (last (word-sp kn)) "ぬ")
                    (string=? (last (word-sp kn)) "む")
                    (string=? (last (word-sp kn)) "ぶ"))
                (string-append (constr (no-last (word-sp kn))) "んだ"))
               ((string=? (last (word-sp kn)) "く")
                (string-append (constr (no-last (word-sp kn))) "いた"))
               ((string=? (last (word-sp kn)) "ぐ")
                (string-append (constr (no-last (word-sp kn))) "いだ"))
               ))
        ((string=? (katuyo kn) "一段")
         (string-append (constr (no-last (word-sp kn))) "た"))
        ((string=? (katuyo kn) "カサ")
         (cond ((string=? kn "来る")
                (string-append (constr (no-last (word-sp kn))) "た"))
               ((string=? kn "くる") "きた")
               (else (string-append (rem kn "する") "した"))))))

(define (tari ta)
  (string-append ta "り"))

(define (tara ta)
  (string-append ta "ら"))

(define (kano kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 "る"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "られる"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "られる"))
                 ((string=? kn "くる") "こられる")
                 (else (string-append (rem kn "する") "できる"))))))
  (iter kty+ 1 2 3))

(define (katuyo-ba kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 "ば"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "れば"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "れば"))
                 ((string=? kn "くる") "くれば")
                 (else (string-append (rem kn "する") "すれば"))))))
  (iter kty+ 1 2 3))

(define (meirei kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (let()
             (string-append (constr (no-last (word-sp kn))) "よ")
             (string-append (constr (no-last (word-sp kn))) "ろ")))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "よ"))
                 ((string=? kn "くる") "こい")
                 (else (let()
                         (string-append (rem kn "する") "せよ")
                         (string-append (rem kn "する") "しろ")))))))
  (iter kty+ 1 2 3))

(define (katuyo-yo kn)
  (define (iter kty+ cnt1 cnt2 cnt3)
    (cond ((string=? (katuyo kn) "五段")
           (cond ((string=? (symbol->string (find (find kty+ cnt1) cnt2))
                            (last (word-sp kn)))
                  (string-append (constr (no-last (word-sp kn)))
                                 (symbol->string (find (find kty+ cnt1) cnt3))
                                 "う"))
                             (else (iter kty+ (+ cnt1 1) cnt2 cnt3))))
          ((string=? (katuyo kn) "一段")
           (string-append (constr (no-last (word-sp kn))) "よう"))
          ((string=? (katuyo kn) "カサ")
           (cond ((string=? kn "来る")
                  (string-append (constr (no-last (word-sp kn))) "よう"))
                 ((string=? kn "くる") "こよう")
                 (else (string-append (rem kn "する") "しよう"))))))
  (iter kty+ 1 2 4))

(define (keiyosi-1 ky)
  (string-append (string-append (constr (no-last (word-sp ky))) "く ")
                 (string-append (constr (no-last (word-sp ky))) "かった ")
                 (string-append (constr (no-last (word-sp ky))) "くない ")
                 (string-append (constr (no-last (word-sp ky))) "くなかった")))

(define (keiyosi-2 ky)
  (string-append (string-append ky "な ")
                 (string-append ky "に ")
                 (string-append ky "です/だ ")
                 (string-append ky "ではありません/ではない ")
                 (string-append ky "ではありませんでした/ではなかった")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (kakko s)
  (define (iter str uchi)
    (cond ((null? str) "")          
          ((or (string=? (car str) "「")
               (string=? (car str) "『")
               (string=? (car str) "≪")
               (string=? (car str) "（"))
           (string-append (car str)
                 (iter (cdr str) #t)))
          ((or (string=? (car str) "」")
               (string=? (car str) "』")
               (string=? (car str) "≫")
               (string=? (car str) "）"))           
           (string-append (car str)
                 (iter (cdr str) #f)))
          ((eq? #t uchi)
           (string-append (car str)
                 (iter (cdr str) uchi)))
          (else (iter (cdr str) uchi))))
  (iter (word-sp s) #f))

(define (kotoba s)
  (define (iter str mem)
    (cond ((null? str) "")
          ((kana? (car str)) str)
          (else (iter (cdr str) (string-append mem (car str))))))
  (iter (word-sp s) ""))

(define (katuyo++ tango tenkan)
  (cond ((string=? tenkan "nai") (katuyo-nai tango))
        ((string=? tenkan "te") (katuyo-te tango))
        ((string=? tenkan "teiru") (katuyo-teiru tango))
        ((string=? tenkan "teita") (katuyo-teita tango))
        ((string=? tenkan "ta") (katuyo-ta tango))
        ((string=? tenkan "tari") (tari tango))
        ((string=? tenkan "tara") (tara tango))
        ((string=? tenkan "ukemi") (ukemi tango))
        ((string=? tenkan "sieki") (sieki tango))
        ((string=? tenkan "ssrr") (ssrr tango))
        ((string=? tenkan "kano") (kano tango))
        ((string=? tenkan "meirei") (meirei tango))
        ((string=? tenkan "ba") (katuyo-ba tango))
        ((string=? tenkan "yo") (katuyo-yo tango))))

;ds=string
(define (dousi? ds)
  (define (iter jpds)
    (cond ((null? jpds) #f)
          ((string=? (symbol->string (car jpds)) ds) #t)
          (else (iter (cdr jpds)))))
  (iter jpds))

;返回动词原形，从汉字返回读音

