;8 queens
(define same?
  (lambda (l r)
    (cond ((and (null? l)(null? r)) #t)
          ((or (null? l)(null? r) #f))
          ((eq? (car l) (car r))
           (same? (cdr l) (cdr r)))
          (else #f))))

(define same*
  (lambda (l r)
    (cond ((and (null? l)(null? r)) #t)
          ((or (null? l)(null? r) #f))
          ((not (pair? (car l)))
           (if (eq? (car l) (car r))
               (same* (cdr l) (cdr r))
               #f))
          (else (cons (same* (car l) (car r))
                      (same* (cdr l) (cdr r)))))))

(define eqlist?
  (lambda (ls1 ls2)
    (cond ((null? ls1)(null? ls2))
          ((null? ls2) #f)
          (else (and (eq? (car ls1)(car ls2))
                     (eqlist? (cdr ls1)(cdr ls2)))))))

(define gen-map
  (lambda (i j)
    (letrec
        ((M (lambda (m n)
              (cond ((= m i) '())
                    ((= n j)
                     (M (+ m 1) 0))
                    (else (cons (list (list 'key: m n) 'value)
                                (M m (+ n 1))))))))
      (M 0 0))))

(define set-map
  (lambda (gm i j val)
    (letrec
        ((M (lambda (gm m n)
              (cond ((= n 8)
                     (M gm (+ m 1) 0))
                    ((and (= m i)(= n j))
                     (cons (list (list 'key: m n) val)
                           (cdr gm)))
                    (else (cons (car gm)
                                (M (cdr gm) m (+ n 1))))))))
      (M gm 0 0))))

(define (set-D1 i j)
  (define (iter row col)
    (cond ((and (>= row 0)(>= col 0))
           (cons (list row col)
                 (iter (- row 1) (- col 1))))
          (else '())))
  (iter (- i 1) (- j 1)))

(define (set-D2 i j)
  (define (iter row col)
    (cond ((and (>= row 0))
           (cons (list row col)
                 (iter (- row 1) col)))
          (else '())))
  (iter (- i 1) j))

(define (set-D3 i j)
  (define (iter row col)
    (cond ((and (>= row 0)(< col 8))
           (cons (list row col)
                 (iter (- row 1) (+ col 1))))
          (else '())))
  (iter (- i 1) (+ j 1)))

(define (set-D4 i j)
  (define (iter row col)
    (cond ((and (>= col 0))
           (cons (list row col)
                 (iter row (- col 1))))
          (else '())))
  (iter i (- j 1)))

(define (set-D5 i j)
  (define (iter row col)
    (cond ((< col 8)
           (cons (list row col)
                 (iter row (+ col 1))))
          (else '())))
  (iter i (+ j 1)))

(define (set-D6 i j)
  (define (iter row col)
    (cond ((and (< row 8)(>= col 0))
           (cons (list row col)
                 (iter (+ row 1) (- col 1))))
          (else '())))
  (iter (+ i 1) (- j 1)))

(define (set-D7 i j)
  (define (iter row col)
    (cond ((and (< row 8))
           (cons (list row col)
                 (iter (+ row 1) col)))
          (else '())))
  (iter (+ i 1) j))

(define (set-D8 i j)
  (define (iter row col)
    (cond ((and (< row 8)(< col 8))
           (cons (list row col)
                 (iter (+ row 1) (+ col 1))))
          (else '())))
  (iter (+ i 1) (+ j 1)))

(define (unsafe lat)
  (let ((i (car lat))
        (j (car (cdr lat))))
    (append (list lat)
            (set-D1 i j)
            (set-D2 i j)
            (set-D3 i j)
            (set-D4 i j)
            (set-D5 i j)
            (set-D6 i j)
            (set-D7 i j)
            (set-D8 i j))))

(define (safe? lst unsafe)
  (cond ((null? unsafe) #t)
        ((same? (car unsafe) lst) #f)
        (else (safe? lst (cdr unsafe)))))

;lat:(unsafe lst)
(define (safe lat)
  (define (iter row col)
    (cond ((= row 8) '())
          ((= col 8)
           (iter (+ row 1) 0))
          ((and (< col 8)(safe? (list row col) lat))
           (cons (list row col)
                 (iter row (+ col 1))))
          (else (iter row (+ col 1)))))
  (iter 0 0))

(define (yui ls1 ls2)
  (cond ((null? ls1) ls2)
        ((member (car ls1) ls2)
         (yui (cdr ls1) ls2))
        (else (cons (car ls1)
                    (yui (cdr ls1) ls2)))))

(define (keizoku? sf row)
  (cond ((null? sf) #f)
        ((eq? (car (car sf)) row) #t)
        (else (keizoku? (cdr sf) row))))

(define (eight-queens lst)
  (define (iter row col cnt sf usf)
    (cond ((null? (safe (append usf (unsafe sf)))) 'error)
          ((< cnt 8)
           (cons sf
                 (iter row col (+ cnt 1)
                       (car (safe (yui usf (unsafe sf))))
                       (yui usf (unsafe sf))
                       )))
          (else '())))
  (iter 0 0 0 (car (safe (unsafe lst))) (unsafe lst)))

;(define s1 (safe (yui (unsafe '(0 0)) (unsafe (car (safe (unsafe '(0 0))))))))
;(define us1 (yui (unsafe '(0 0)) (unsafe (car (safe (unsafe '(0 0)))))))
;(define us2 (yui us1 (unsafe (car s1))))
;(define s2 (safe us2))
;(define us3 (yui us2 (unsafe (car s2))))
;(define s3 (safe us3))