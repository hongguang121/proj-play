(define time current-inexact-milliseconds)

;计时器
(define (how-long fn para)
  (let ((start (time)))
    (fn para)
    (- (time) start)))

;8 queens
(define same?
  (lambda (l r)
    (cond ((and (null? l)(null? r)) #t)
          ((or (null? l)(null? r) #f))
          ((eq? (car l) (car r))
           (same? (cdr l) (cdr r)))
          (else #f))))

(define (set-D2 i j)
  (define (iter row col)
    (cond ((< row 8)
           (cons (list row col)
                 (iter (+ row 1) col)))
          (else '())))
  (iter i j))

(define (set-D4 i j)
  (define (iter row col)
    (cond ((< col 8)
           (cons (list row col)
                 (iter row (+ col 1))))
          (else '())))
  (iter i 0))

(define (set-D6 i j)
  (define (iter row col)
    (cond ((and (< row 8)(>= col 0))
           (cons (list row col)
                 (iter (+ row 1) (- col 1))))
          (else '())))
  (iter (+ i 1) (- j 1)))

(define (set-D8 i j)
  (define (iter row col)
    (cond ((and (< row 8)(< col 8))
           (cons (list row col)
                 (iter (+ row 1) (+ col 1))))
          (else '())))
  (iter (+ i 1) (+ j 1)))

(define (unsafe lat)
  (let ((i (car lat))
        (j (car (cdr lat))))
    (append (list lat)
            (set-D2 i j)
            (set-D4 i j)            
            (set-D6 i j)            
            (set-D8 i j))))

(define (safe? lst unsafe)
  (cond ((null? unsafe) #t)
        ((same? (car unsafe) lst) #f)
        (else (safe? lst (cdr unsafe)))))

;lat:(unsafe lst)
(define (safe lat row)
  (define (iter row col)
    (cond ((= col 8)
           '())
          ((safe? (list row col) lat)
           (cons (list row col)
                 (iter row (+ col 1))))
          (else (iter row (+ col 1)))))
  (iter row 0))

;组成ls1+ls2的集合
(define (yui ls1 ls2)
  (cond ((null? ls1) ls2)
        ((member (car ls1) ls2)
         (yui (cdr ls1) ls2))
        (else (cons (car ls1)
                    (yui (cdr ls1) ls2)))))

;pst:皇后坐标序列(顺序为0->7)。返回坐标序列的unsafe集合
(define (comp-unsafe pst)
  (cond ((null? pst) '())
        (else (yui (unsafe (car pst))
                   (comp-unsafe (cdr pst))))))

;lst:(car mem)得到新坐标,并提取行坐标;way:坐标路径集合
(define (find-way lst way)
  (cond ((null? way) '())
        ((eq? (car lst) (car (car way))) (cdr way))
        (else (find-way lst (cdr way)))))

(define (memory saf mem)
  (cond ((null? saf) mem)
        ((eq? 'new saf) mem)
        (else (append (cdr saf) mem))))

(define (road saf way)
  (cond ((null? saf) way)
        (else (append (list (car saf)) way))))

(define (queens pos)
  (define (iter rid saf mem way ret)
    (cond ((and (null? mem)(null? saf)) ret)
          ((null? saf)
           (iter (+ 1 (car (car mem)))
                 'new
                 (cdr mem)
                 (append (list (car mem)) (find-way (car mem) way))
                 ret))
          ((= rid 8)
           (iter (+ 1 (car (car mem)))
                 'new
                 (cdr mem)
                 (append (list (car mem)) (find-way (car mem) way))
                 (append way (list /) ret)))
          (else (iter (+ rid 1)
                      (safe (comp-unsafe way) rid)
                      (memory saf mem)
                      (road (safe (comp-unsafe way) rid) way)
                      ret))))
  (iter 2 (safe (unsafe pos) 1) '() (road (safe (unsafe pos) 1) (list pos)) '()))

(define (all)
  (define (iter i j t)
    (cond ((= j 8)
           (let ()
             '()
             (- (time) t)))
          (else (append (queens (list i j))
                        (iter i (+ j 1) t)))))
  (iter 0 0 (time)))